/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var fs = require("fs");


var path = require("path");
var url = require("url");
var EE = require("events").EventEmitter;
var util = require("util");

var logger = require("./logger");

function setprops(dest, src) {
  for (var k in src) {
    dest[k] = src[k]; };

  return dest;};


function make_parent_directories(filename, _) { var dir; var __frame = { name: "make_parent_directories", line: 18 }; return __func(_, this, arguments, make_parent_directories, 1, __frame, function __$make_parent_directories() {
    dir = path.dirname(filename); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$make_parent_directories() {

          return fs.mkdir(dir, __cb(_, __frame, 3, 11, __then, true)); }); })(function ___(e, __result) { __catch(function __$make_parent_directories() { if (e) { return (function __$make_parent_directories(__then) {

              if ((e.code === "ENOENT")) {
                return make_parent_directories(dir, __cb(_, __frame, 6, 12, function __$make_parent_directories() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$make_parent_directories() {

                        return fs.mkdir(dir, __cb(_, __frame, 8, 19, __then, true)); }); })(function ___(e, __result) { __catch(function __$make_parent_directories() { if (e) {

                          if ((e.code == "EEXIST")) { return _(null); }

                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, __then); }); }, true)); } else {


                if ((e.code == "EEXIST")) { return _(null); }

                 else {
                  return _(e); } ; __then(); } ; })(__then); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$make_parent_directories() { _(); }); }); });};




function get_file_size(path, _) { var stat; var __frame = { name: "get_file_size", line: 42 }; return __func(_, this, arguments, get_file_size, 1, __frame, function __$get_file_size() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get_file_size() {

          return fs.stat(path, __cb(_, __frame, 2, 22, function ___(__0, __1) { stat = __1;
            return _(null, stat.size); }, true)); }); })(function ___(e, __result) { __catch(function __$get_file_size() { if (e) {

            if ((e.code === "ENOENT")) {
              return _(null, null); }
             else {
              return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get_file_size() { _(); }); }); });};




function pipe_request(request, stream, cb) {

  var done = false;
  stream.on("error", function(err) {
    if (done) { return }; done = true;
    cb(err); });

  stream.on("finish", function() {
    if (done) { return }; done = true;
    cb(null, true); });

  request.on("error", function(err) {
    if (done) { return }; done = true;
    cb(err); });

  request.on("close", function() {
    if (done) { return }; done = true;
    stream.end();
    cb(null, false); });

  request.pipe(stream);
  return;};


function SyncServer(destdir, debug_mode, status_interval, validate_regex) {
  this.destdir = destdir;
  this.locks = { };
  this.debug_mode = (debug_mode === true);
  this.status_interval = status_interval;
  this.validate_regex = (validate_regex ? new RegExp(validate_regex) : null);
  this.log = logger("server");
  this.head_requests = 0;
  this.put_requests = 0;
  this.error_requests = 0;
  this.put_bytes = 0;
  this.statuslogger = new StatusLogger(this, this.status_interval);};


SyncServer.prototype.start = function() {
  this.log.info("log synchronization server starting");
  this.statuslogger.start();};


SyncServer.prototype.close = function() {
  this.statuslogger.close();
  this.log.info("log synchronization server stopping");};


SyncServer.prototype.validate_path = function(uri) {
  if (this.validate_regex) {
    return this.validate_regex.test(uri); }
   else {
    return true; } ;};



SyncServer.prototype.handle_raw_request = function(request, response) {
  var self = this;
  return this.handle_request(request, response, function(err, val) {
    if (err) {
      if ((err.http_status != 404)) { self.error_requests += 1; };
      if (err.http_status) {
        var msg = (self.debug_mode ? err.stack : (String(err) + "\n"));
        if ((err.http_status !== 404)) { self.log.warn(("CLIENT ERROR: " + err)); };
        response.writeHead((err.http_status || 500), { "Content-Type": "text/plain",
        "Content-Length": msg.length });
        if ((request.method !== "HEAD")) { response.write(msg); };
        response.end(); }
       else {
        var msg = "internal error\n";
        self.log.error(("INTERNAL ERROR: " + err));
        if (self.debug_mode) {
          self.log.error(err.stack);
          msg += (err.stack + "\n"); } ;

        response.writeHead(500, { "Content-Type": "text/plain",
        "Content-Length": msg.length });
        if ((request.method !== "HEAD")) { response.write(msg); };
        response.end(); } ; }

     else {
      if ((request.method === "HEAD")) { self.head_requests += 1; } else {
        if ((request.method === "PUT")) { self.put_requests += 1; } };
      response.writeHead(val[0], val[1]);
      response.end(); } ; });};




SyncServer.prototype.handle_request = function SyncServer_prototype_handle_request__1(request, response, _) { var __this = this; var __frame = { name: "SyncServer_prototype_handle_request__1", line: 144 }; return __func(_, this, arguments, SyncServer_prototype_handle_request__1, 2, __frame, function __$SyncServer_prototype_handle_request__1() { return (function __$SyncServer_prototype_handle_request__1(__then) {
      if ((request.method === "HEAD")) {
        return __this.handle_head(request, response, __cb(_, __frame, 2, 20, _, true)); } else { return (function __$SyncServer_prototype_handle_request__1(__then) {
          if ((request.method === "PUT")) {
            return __this.handle_put(request, response, __cb(_, __frame, 4, 20, _, true)); } else {

            return _(setprops(new Error("only HEAD and PUT supported"), { http_status: 501 })); } ; })(__then); } ; })(_); });};



SyncServer.prototype.handle_head = function SyncServer_prototype_handle_head__2(request, response, _) { var uri, filename, local_size, __this = this; var __frame = { name: "SyncServer_prototype_handle_head__2", line: 154 }; return __func(_, this, arguments, SyncServer_prototype_handle_head__2, 2, __frame, function __$SyncServer_prototype_handle_head__2() {
    uri = path.join("/", url.parse(request.url).pathname);
    if (!__this.validate_path(uri)) { return _(setprops(new Error("request path not accepted"), { http_status: 400 })); } ;
    filename = path.join(__this.destdir, uri);

    return get_file_size(filename, __cb(_, __frame, 5, 21, function ___(__0, __1) { local_size = __1;
      if ((local_size !== null)) {
        return _(null, [200,{ "Content-Length": String(local_size) },]); }
       else {
        return _(setprops(new Error("file does not exist"), { http_status: 404 })); } ; _(); }, true)); });};



SyncServer.prototype.handle_put = function SyncServer_prototype_handle_put__3(request, response, _) { var uri, filename, cr, m, start, end, len, size, local_size, ws, success, __this = this; var __frame = { name: "SyncServer_prototype_handle_put__3", line: 167 }; return __func(_, this, arguments, SyncServer_prototype_handle_put__3, 2, __frame, function __$SyncServer_prototype_handle_put__3() {
    uri = path.join("/", url.parse(request.url).pathname);
    if (!__this.validate_path(uri)) { return _(setprops(new Error("request path not accepted"), { http_status: 400 })); } ;
    filename = path.join(__this.destdir, uri);
    cr = request.headers["content-range"];
    if (!cr) { return _(setprops(new Error("no content-range header"), { http_status: 400 })); } ;
    m = cr.match(/^bytes ((\d+)-(\d+)|\*)\/((\d+)|\*)$/);
    if (!m) { return _(setprops(new Error("invalid content-range header"), { http_status: 400 })); } ;
    if ((typeof m[2] === "undefined")) { return _(setprops(new Error("content-range must specify byte range"), { http_status: 400 })); } ;
    if ((typeof m[5] === "undefined")) { return _(setprops(new Error("content-range must specify instance length"), { http_status: 400 })); } ;
    start = +m[2]; end = +m[3]; len = ((end - start) + 1); size = +m[5];
    if ((len < 1)) { return _(setprops(new Error("content-range length must be greater than zero"), { http_status: 400 })); } ;
    if (((start + len) > size)) { return _(setprops(new Error("invalid instance length in content-range"), { http_status: 400 })); } ;
    if (__this.locks[filename]) { return _(setprops(new Error("concurrent operation on same file"), { http_status: 409 })); } ;
    __this.locks[filename] = true; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$SyncServer_prototype_handle_put__3() {

          return get_file_size(filename, __cb(_, __frame, 16, 25, function ___(__0, __1) { local_size = __1; return (function __$SyncServer_prototype_handle_put__3(__then) {
              if ((local_size == null)) {
                local_size = 0;
                return make_parent_directories(filename, __cb(_, __frame, 19, 12, __then, true)); } else { __then(); } ; })(function __$SyncServer_prototype_handle_put__3() {

              if ((local_size > size)) { return _(setprops(new Error("file is larger than specified in instance length"), { http_status: 416 })); } ;
              if ((start !== local_size)) { return _(setprops(new Error("only strict append is supported on file"), { http_status: 416 })); } ;
              ws = fs.createWriteStream(filename, { flags: "a" });
              return pipe_request(request, ws, __cb(_, __frame, 24, 22, function ___(__0, __2) { success = __2;
                if (!success) { return _(setprops(new Error("request was not fully processed"), { http_status: 400 })); } ;
                return get_file_size(filename, __cb(_, __frame, 26, 21, function ___(__0, __3) { local_size = __3;
                  __this.put_bytes += len;
                  return _(null, [204,{ "Content-Length": "0" },]); }, true)); }, true)); }); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$SyncServer_prototype_handle_put__3() {

            delete __this.locks[filename]; __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$SyncServer_prototype_handle_put__3() { _(); }); }); });};



function StatusLogger(server, log_interval) {
  this.server = server;
  this.log_interval = log_interval;
  this.stats = this.gather_stats();
  this.interval_id = null;
  this.log = logger("status");};


StatusLogger.prototype.start = function() {
  this.interval_id = setInterval(this.status.bind(this), this.log_interval);};


StatusLogger.prototype.close = function() {
  if (this.interval_id) {
    clearInterval(this.interval_id);
    this.interval_id = null; } ;};



StatusLogger.prototype.gather_stats = function() {
  var stats = {
    head_requests: this.server.head_requests,
    put_requests: this.server.put_requests,
    error_requests: this.server.error_requests,
    put_bytes: this.server.put_bytes };

  return stats;};


StatusLogger.prototype.status = function() {
  var olds = this.stats;
  var news = this.gather_stats();
  this.log.info(util.format("%d head requests, %d put requests, %d errors, %d put bytes", (news.head_requests - olds.head_requests), (news.put_requests - olds.put_requests), (news.error_requests - olds.error_requests), (news.put_bytes - olds.put_bytes)));




  this.stats = news;};


exports.SyncServer = SyncServer;
